rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUser() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function isTeacher() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }

    function isTeamLeader() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teamLeader';
    }

    function isTeamMember(teamId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid));
    }

    function isTeamMemberOf(teamId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teams.hasAny([teamId]);
    }

    function isTeamLeaderOf(teamId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teamLeader' &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teams.hasAny([teamId]);
    }

    function userExists() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function isPartOfTeam(teamId) {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/teams/$(teamId)).data.leaderId == request.auth.uid ||
        get(/databases/$(database)/documents/teams/$(teamId)).data.members.hasAny([request.auth.uid])
      );
    }

    // Users collection - Allow users to read their own data and teachers to read all user data
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isTeacher());
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && (request.auth.uid == userId || isTeacher());
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Teams collection
    match /teams/{teamId} {
      allow read: if isAuthenticated() && (isTeamMember(teamId) || isTeacher());
      allow create: if isTeacher();
      allow update: if isTeacher();
      allow delete: if isTeacher();

      // ISE1 marks
      match /ISE1/{criteria} {
    allow read, write: if request.auth != null;

  }

  match /ISE2/{criteria} {
    allow read, write: if request.auth != null;

  }

  match /PBLQ/{criteria} {
    allow read, write: if request.auth != null;

  }

      // Team tasks
      match /tasks/{taskId} {
        allow read: if isAuthenticated() && (
          isTeacher() || 
          isTeamLeaderOf(teamId) || 
          isTeamMemberOf(teamId)
        );
        allow create: if isAuthenticated() && (
          isTeacher() || 
          isTeamLeaderOf(teamId)
        );
        allow update: if isAuthenticated() && (
          isTeacher() || 
          isTeamLeaderOf(teamId) ||
          (isTeamMemberOf(teamId) && resource.data.assignedTo == request.auth.uid)
        );
        allow delete: if isAuthenticated() && (
          isTeacher() || 
          isTeamLeaderOf(teamId)
        );
      }

      // Team files
      match /files/{fileId} {
        allow read: if isAuthenticated() && (
          isTeacher() || 
          isTeamLeaderOf(teamId) || 
          isTeamMemberOf(teamId)
        );
        allow create: if isAuthenticated() && (
          isTeacher() || 
          isTeamLeaderOf(teamId) || 
          isTeamMemberOf(teamId)
        );
        allow update: if isAuthenticated() && (
          isTeacher() || 
          isTeamLeaderOf(teamId) ||
          (isTeamMemberOf(teamId) && resource.data.uploadedBy == request.auth.uid)
        );
        allow delete: if isAuthenticated() && (
          isTeacher() || 
          isTeamLeaderOf(teamId) ||
          (isTeamMemberOf(teamId) && resource.data.uploadedBy == request.auth.uid)
        );
      }

      // Team messages
      match /messages/{messageId} {
        allow read: if isAuthenticated() && (
          isTeacher() || 
          isTeamLeaderOf(teamId) || 
          isTeamMemberOf(teamId)
        );
        allow create: if isAuthenticated() && (
          isTeacher() || 
          isTeamLeaderOf(teamId) || 
          isTeamMemberOf(teamId)
        );
        allow delete: if isAuthenticated() && (
          isTeacher() || 
          isTeamLeaderOf(teamId) ||
          (isTeamMemberOf(teamId) && resource.data.senderId == request.auth.uid)
        );
      }

      // Team members
      match /members/{userId} {
        allow read: if isAuthenticated() && (isTeamMember(teamId) || isTeacher());
        allow write: if isTeacher();
      }
    }

    // Forum collection
    match /forum/{discussionId} {
      allow read: if true;
      allow create: if request.resource.data.title is string &&
                    request.resource.data.title.size() > 0 &&
                    request.resource.data.content is string &&
                    request.resource.data.content.size() > 0 &&
                    request.resource.data.createdAt is timestamp;
      allow update: if true;
      allow delete: if true;

      // Forum comments
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.resource.data.content is string &&
                      request.resource.data.content.size() > 0 &&
                      request.resource.data.createdAt is timestamp;
        allow update: if true;
        allow delete: if true;
      }
    }

    // Notices collection
    match /notices/{noticeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
                    (isTeacher() || isTeamLeader()) &&
                    request.resource.data.title is string &&
                    request.resource.data.title.size() > 0 &&
                    request.resource.data.content is string &&
                    request.resource.data.content.size() > 0 &&
                    request.resource.data.createdAt is timestamp;
      allow update, delete: if isAuthenticated() &&
                            (resource.data.author == request.auth.email || isTeacher());
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        resource.data.recipientEmails.hasAny([request.auth.token.email]) ||
        resource.data.sender == request.auth.token.email ||
        isTeacher() ||
        isTeamLeader()
      );
      allow create: if isAuthenticated() &&
                    (isTeacher() || isTeamLeader()) &&
                    request.resource.data.title is string &&
                    request.resource.data.title.size() > 0 &&
                    request.resource.data.content is string &&
                    request.resource.data.content.size() > 0 &&
                    request.resource.data.createdAt is timestamp &&
                    request.resource.data.sender == request.auth.token.email &&
                    request.resource.data.recipientEmails is list &&
                    request.resource.data.recipientEmails.size() > 0 &&
                    request.resource.data.authorRole in ['teacher', 'teamLeader'];
      allow update, delete: if isAuthenticated() &&
                            (resource.data.sender == request.auth.token.email || isTeacher());
    }

    // Teacher-Leader chats
    match /teacherLeaderChats/{chatId} {
      allow read: if isAuthenticated() && (isTeacher() || isTeamLeader());
      allow create: if isAuthenticated() &&
                    (isTeacher() || isTeamLeader()) &&
                    request.resource.data.senderId == request.auth.uid &&
                    request.resource.data.timestamp is timestamp;
      allow delete: if isAuthenticated() &&
                    (resource.data.senderId == request.auth.uid || isTeacher());
    }

    // Profiles collection
    match /profiles/{userId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Reports collection
    match /reports/{reportId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isTeacher() || 
        (isTeamLeaderOf(resource.data.teamId) && request.auth.uid == resource.data.userId)
      );
      allow delete: if isAuthenticated() && (
        isTeacher() || 
        (isTeamLeaderOf(resource.data.teamId) && request.auth.uid == resource.data.userId)
      );
    }

    // User teams collection
    match /userTeams/{userId} {
      allow read: if isAuthenticated() &&
                  (request.auth.uid == userId || isTeacher());
      allow create, update: if isAuthenticated() &&
                            (request.auth.uid == userId || isTeacher() ||
                             (isTeamLeader() && request.resource.data.role == "teamMember"));
      allow delete: if isAuthenticated() &&
                    (request.auth.uid == userId || isTeacher());
    }

    // User data collection
    match /userData/{userId} {
      allow read, write, delete: if request.auth.uid == userId;
    }
  }
}